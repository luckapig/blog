"use strict";

require("#polyfill");

var _http = require("http");

var _os = require("os");

var _path = require("path");

var _fs = require("fs");

var _worker_threads = require("worker_threads");

var _stdEnv = require("std-env");

var _server = require("../server");

const server = new _http.Server(_server.handle);

function getAddress() {
  if (_stdEnv.provider === "stackblitz" || process.env.NITRO_NO_UNIX_SOCKET) {
    return "0";
  }

  const socketName = `worker-${process.pid}-${_worker_threads.threadId}.sock`;

  if (_stdEnv.isWindows) {
    return (0, _path.join)("\\\\.\\pipe\\nitro", socketName);
  } else {
    const socketDir = (0, _path.join)((0, _os.tmpdir)(), "nitro");
    (0, _fs.mkdirSync)(socketDir, {
      recursive: true
    });
    return (0, _path.join)(socketDir, socketName);
  }
}

const listenAddress = getAddress();
server.listen(listenAddress, () => {
  const _address = server.address();

  _worker_threads.parentPort.postMessage({
    event: "listen",
    address: typeof _address === "string" ? {
      socketPath: _address
    } : `http://localhost:${_address.port}`
  });
});