"use strict";

require("#polyfill");

var _server = require("../server");

var _utils = require("../server/utils");

const STATIC_ASSETS_BASE = process.env.NUXT_STATIC_BASE + "/" + process.env.NUXT_STATIC_VERSION;
addEventListener("fetch", event => {
  const url = new URL(event.request.url);

  if (url.pathname.includes(".") && !url.pathname.startsWith(STATIC_ASSETS_BASE) && !url.pathname.startsWith("/api")) {
    return;
  }

  event.respondWith(handleEvent(url, event));
});

async function handleEvent(url, event) {
  let body;

  if ((0, _utils.requestHasBody)(event.request)) {
    body = await (0, _utils.useRequestBody)(event.request);
  }

  const r = await (0, _server.localCall)({
    event,
    url: url.pathname + url.search,
    host: url.hostname,
    protocol: url.protocol,
    headers: event.request.headers,
    method: event.request.method,
    redirect: event.request.redirect,
    body
  });
  return new Response(r.body, {
    headers: r.headers,
    status: r.status,
    statusText: r.statusText
  });
}

self.addEventListener("install", () => {
  self.skipWaiting();
});
self.addEventListener("activate", event => {
  event.waitUntil(self.clients.claim());
});