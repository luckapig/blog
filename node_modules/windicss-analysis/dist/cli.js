"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }






var _chunkAFVJFWFKjs = require('./chunk-AFVJFWFK.js');

// node/cli.ts
var _path = require('path');
var _fs = require('fs');
var _cac = require('cac'); var _cac2 = _interopRequireDefault(_cac);
var cli = _cac2.default.call(void 0, "windicss-analysis");
cli.help().version(_chunkAFVJFWFKjs.version).option("--port <port>", "Port", { default: 8113 }).option("--open", "Open in browser", { default: true }).option("--json [filepath]", "Output analysis result file in JSON").option("--html [dir]", "Output analysis result in static web app");
var parsed = cli.parse();
async function run() {
  const root = _path.resolve.call(void 0, cli.args[0] || process.cwd());
  if (parsed.options.help)
    return;
  if (parsed.options.html) {
    if (parsed.options.html === true)
      parsed.options.html = _path.resolve.call(void 0, root, "windicss-analysis-report");
    await _chunkAFVJFWFKjs.generateBuild.call(void 0, {
      root,
      outDir: parsed.options.html
    });
  } else if (parsed.options.json) {
    if (parsed.options.json === true)
      parsed.options.json = "windicss-analysis-report.json";
    await _fs.promises.writeFile(parsed.options.json, JSON.stringify((await _chunkAFVJFWFKjs.runAnalysis.call(void 0, { root })).result, null, 2), "utf-8");
  } else {
    await _chunkAFVJFWFKjs.startServer.call(void 0, _chunkAFVJFWFKjs.__spreadProps.call(void 0, _chunkAFVJFWFKjs.__spreadValues.call(void 0, {}, parsed.options), {
      root: _path.resolve.call(void 0, cli.args[0] || process.cwd())
    }));
  }
}
run();
