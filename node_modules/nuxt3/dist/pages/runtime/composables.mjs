import { useNuxtApp } from "#app";
export const useRouter = () => {
  return useNuxtApp().$router;
};
export const useRoute = () => {
  return useNuxtApp()._route;
};
const warnRuntimeUsage = (method) => console.warn(`${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);
export const definePageMeta = (meta) => {
  if (process.dev) {
    warnRuntimeUsage("definePageMeta");
  }
};
export const defineNuxtRouteMiddleware = (middleware) => middleware;
export const addRouteMiddleware = (name, middleware, options = {}) => {
  const nuxtApp = useNuxtApp();
  if (options.global) {
    nuxtApp._middleware.global.push(middleware);
  } else {
    nuxtApp._middleware.named[name] = middleware;
  }
};
const isProcessingMiddleware = () => {
  try {
    if (useNuxtApp()._processingMiddleware) {
      return true;
    }
  } catch {
  }
  return false;
};
export const navigateTo = (to) => {
  if (isProcessingMiddleware()) {
    return to;
  }
  const router = process.server ? useRouter() : window.$nuxt.router;
  return router.push(to);
};
export const abortNavigation = (err) => {
  if (process.dev && !isProcessingMiddleware()) {
    throw new Error("abortNavigation() is only usable inside a route middleware handler.");
  }
  if (err) {
    throw err instanceof Error ? err : new Error(err);
  }
  return false;
};
