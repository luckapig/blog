import { ComputedRef, /* KeepAliveProps, */ Ref, TransitionProps } from 'vue';
import type { Router, RouteLocationNormalizedLoaded, NavigationGuard, RouteLocationNormalized, RouteLocationRaw } from 'vue-router';
export declare const useRouter: () => Router;
export declare const useRoute: () => RouteLocationNormalizedLoaded;
export interface PageMeta {
    [key: string]: any;
    pageTransition?: false | TransitionProps;
    layoutTransition?: false | TransitionProps;
    layout?: false | string | Ref<false | string> | ComputedRef<false | string>;
    key?: string | ((route: RouteLocationNormalizedLoaded) => string);
}
declare module 'vue-router' {
    interface RouteMeta extends PageMeta {
    }
}
export declare const definePageMeta: (meta: PageMeta) => void;
export interface RouteMiddleware {
    (to: RouteLocationNormalized, from: RouteLocationNormalized): ReturnType<NavigationGuard>;
}
export declare const defineNuxtRouteMiddleware: (middleware: RouteMiddleware) => RouteMiddleware;
export interface AddRouteMiddlewareOptions {
    global?: boolean;
}
export declare const addRouteMiddleware: (name: string, middleware: RouteMiddleware, options?: AddRouteMiddlewareOptions) => void;
export declare const navigateTo: (to: RouteLocationRaw) => RouteLocationRaw | Promise<void | import("vue-router").NavigationFailure>;
/** This will abort navigation within a Nuxt route middleware handler. */
export declare const abortNavigation: (err?: Error | string) => boolean;
