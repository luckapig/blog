'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const REGEX_RULES = [
  {
    matcher: /[\\$.|*+(){^]/g,
    replacer: (match) => `\\${match}`
  }
];
function makeRegex(pattern, ignorecase) {
  if (pattern instanceof RegExp) {
    return pattern;
  }
  const source = REGEX_RULES.reduce((prev, {matcher, replacer}) => prev.replace(matcher, replacer), pattern);
  return new RegExp(source, ignorecase ? "i" : void 0);
}
function createMatcher(options, ignorecase = false, matchAll = false) {
  if (typeof options === "function") {
    return options;
  }
  if (Array.isArray(options)) {
    const patterns = options.map((option) => makeRegex(option, ignorecase));
    return (value) => {
      const stringValue = String(value);
      if (matchAll) {
        return patterns.every((pattern) => pattern.test(stringValue));
      }
      return patterns.some((pattern) => pattern.test(stringValue));
    };
  }
  return createMatcher([options], ignorecase, matchAll);
}
function allowList(options, ignorecase = false) {
  let accept = (_value) => true;
  let reject = null;
  if (options) {
    if (typeof options === "object" && !(options instanceof RegExp) && !Array.isArray(options)) {
      const object = options;
      accept = object.accept ? createMatcher(object.accept, ignorecase) : accept;
      reject = object.reject ? createMatcher(object.reject, ignorecase, true) : reject;
    } else {
      accept = createMatcher(options, ignorecase);
    }
  }
  if (typeof reject === "function") {
    return (value) => accept(value) && !reject(value);
  }
  return accept;
}

exports.allowList = allowList;
