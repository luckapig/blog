import { readFileSync, writeFileSync } from 'fs';
import { URL } from 'url';
import { join, dirname, relative } from 'pathe';
import { createUtils } from '@windicss/plugin-utils';
import { resolveModule, defineNuxtModule, clearRequireCache, isNuxt3, isNuxt2, tryRequireModule, requireModule, requireModulePkg, extendWebpackConfig, extendViteConfig } from '@nuxt/kit';
import VitePluginWindicss from 'vite-plugin-windicss';
import consola from 'consola';
import { createApp } from 'h3';
import { ApiMiddleware } from 'windicss-analysis';
import { listen } from 'listhen';
import sirv from 'sirv';
import defu from 'defu';

const version = "2.2.2";

const logger = consola.withScope("nuxt-windicss");

async function analyze(runtime, options = {}) {
  if (typeof options === "boolean")
    options = {};
  const resolvedOptions = defu(options, {
    server: {
      port: 3330,
      showURL: false
    }
  });
  const app = createApp();
  app.use("/api", ApiMiddleware(runtime.windiOptions, { utils: runtime.utils, ...resolvedOptions.analysis }));
  app.use(sirv(join(dirname(resolveModule("windicss-analysis")), "app"), { dev: true, single: true }));
  return await listen(app, resolvedOptions.server);
}

const __dirname = new URL(".", import.meta.url).pathname;
const index = defineNuxtModule({
  meta: {
    name: "nuxt-windicss",
    configKey: "windicss"
  },
  configKey: "windicss",
  name: "nuxt-windicss",
  defaults: {
    analyze: false,
    displayVersionInfo: true,
    scan: {
      dirs: ["./"],
      exclude: [
        "node_modules",
        "node_modules_dev",
        "node_modules_prod",
        "dist",
        ".git",
        ".github",
        ".nuxt",
        "coverage",
        "**/__snapshots__",
        "*.test.js"
      ]
    },
    preflight: {
      alias: {
        "nuxt-link": "a",
        "nuxt-img": "img"
      }
    }
  },
  async setup(nuxtWindiOptions, nuxt) {
    const nuxtOptions = nuxt.options;
    if (!nuxtWindiOptions.root)
      nuxtWindiOptions.root = nuxt.options.rootDir;
    if (nuxtOptions.buildModules.includes("@nuxtjs/tailwindcss")) {
      logger.error("Sorry, you can't use Windi CSS with Tailwind CSS. Please remove the `@nuxtjs/tailwindcss` module.");
      return;
    }
    const ctxOnOptionsResolved = nuxtWindiOptions.onOptionsResolved;
    nuxtWindiOptions.onOptionsResolved = async (options) => {
      if (ctxOnOptionsResolved) {
        const result = ctxOnOptionsResolved(options);
        return typeof result === "object" ? result : options;
      }
      await nuxt.callHook("windicss:options", options);
      logger.debug("Post hook windicss:options", options);
      return options;
    };
    const ctxOnConfigResolved = nuxtWindiOptions.onConfigResolved;
    let passed = false;
    nuxtWindiOptions.onConfigResolved = async (windiConfig, configFilePath) => {
      if (!passed) {
        let configType = "inline";
        if (configFilePath) {
          clearRequireCache(configFilePath);
          configType = `./${relative(nuxtOptions.rootDir, configFilePath)}`;
          if (nuxt.options.dev)
            nuxt.options.watch.push(configFilePath);
        }
        if (nuxtWindiOptions.displayVersionInfo && nuxt.options.dev) {
          nuxt.hook("build:before", () => {
            logger.info(`\`nuxt-windicss v${version}\` running with config: \`${configType}\`.`);
          });
        }
        passed = true;
      }
      if (ctxOnConfigResolved) {
        const result = await ctxOnConfigResolved(windiConfig, configFilePath);
        return typeof result === "object" ? result : windiConfig;
      }
      await nuxt.callHook("windicss:config", windiConfig);
      logger.debug("Post hook windicss:config", windiConfig);
      return windiConfig;
    };
    const utils = createUtils(nuxtWindiOptions, { root: nuxtWindiOptions.root, name: "nuxt-windicss" });
    const ensureInit = utils.init().then(() => nuxt.callHook("windicss:utils", utils));
    const windiImports = nuxt.options.css.filter((css) => (typeof css === "string" ? css : css.src).includes("virtual:windi"));
    if (!windiImports.length)
      nuxt.options.css.unshift("virtual:windi.css");
    if (isNuxt3(nuxt) && nuxt.options.vite === false) {
      nuxt.options.css = nuxt.options.css.map((css) => {
        if (!css.includes("virtual:windi") || css.startsWith("@"))
          return css;
        return join("@", css);
      });
    }
    if (isNuxt2(nuxt)) {
      nuxt.hook("build:templates", ({ templateVars, templatesFiles }) => {
        templateVars.css = templateVars.css.map((css) => {
          const src = typeof css === "string" ? css : css.src;
          if (src.includes("virtual:windi")) {
            return {
              src,
              virtual: true
            };
          }
          return css;
        });
        templatesFiles.map((template) => {
          if (!template.src.endsWith("App.js"))
            return template;
          const file = readFileSync(template.src, { encoding: "utf-8" });
          const regex = /(import '<%= )(relativeToBuild\(resolvePath\(c\.src \|\| c, { isStyle: true }\)\))( %>')/gm;
          const subst = "$1c.virtual ? c.src : $2$3";
          const appTemplate = file.replace(regex, subst);
          const newPath = join(__dirname, "template", "App.js");
          writeFileSync(newPath, appTemplate);
          template.src = newPath;
          return template;
        });
      });
    }
    nuxt.hook("build:before", async () => {
      const nuxtPostcss = nuxt.options.build.postcss;
      if (!nuxtPostcss)
        return;
      const hasPostCSSImport = tryRequireModule("postcss-import");
      if (!hasPostCSSImport)
        return;
      const readCache = requireModule("read-cache");
      const updatedPostcssImport = {
        async load(filename) {
          await ensureInit;
          const file = await readCache(filename, "utf-8");
          return utils.transformCSS(file, filename);
        }
      };
      const { version: postcssLoaderVersion } = requireModulePkg("postcss-loader");
      if (isNuxt3(nuxt) || Number.parseInt(postcssLoaderVersion.split(".")[0]) > 3 || nuxt.options.vite === false) {
        if (!nuxtPostcss.postcssOptions)
          nuxtPostcss.postcssOptions = {};
        if (!nuxtPostcss.postcssOptions.plugins)
          nuxtPostcss.postcssOptions.plugins = {};
        nuxtPostcss.postcssOptions.plugins["postcss-import"] = {
          ...nuxtPostcss.postcssOptions.plugins["postcss-import"],
          ...updatedPostcssImport
        };
      } else {
        if (!nuxtPostcss.plugins)
          nuxtPostcss.plugins = {};
        nuxtPostcss.plugins["postcss-import"] = {
          ...nuxtPostcss.plugins["postcss-import"],
          ...updatedPostcssImport
        };
      }
    });
    extendWebpackConfig((config) => {
      const WindiCSSWebpackPlugin = requireModule("windicss-webpack-plugin");
      const plugin = new WindiCSSWebpackPlugin({ ...nuxtWindiOptions, utils });
      config.plugins = config.plugins || [];
      config.plugins.push(plugin);
    });
    extendViteConfig(async (config) => {
      const plugin = VitePluginWindicss(nuxtWindiOptions, { root: nuxtWindiOptions.root, utils, name: "nuxt-windicss" });
      nuxt.options.alias["windi.css"] = "virtual:windi.css";
      config.plugins = config.plugins || [];
      config.plugins.push(plugin);
    });
    if (nuxtOptions.dev) {
      nuxt.hook("content:file:beforeParse", async (file) => {
        if (file.extension !== ".md")
          return;
        await ensureInit;
        await utils.extractFile(file.data, file.path, true);
        const css = await utils.generateCSS();
        file.data += `

<style>${css}</style>`;
      });
      if (nuxtWindiOptions.analyze !== false) {
        let serverStarted = false;
        nuxt.hook("listen", () => {
          serverStarted = true;
        });
        analyze({
          windiOptions: nuxtWindiOptions,
          utils
        }, nuxtWindiOptions.analyze).then((server) => {
          const message = `WindCSS Analysis: ${server.url}`;
          if (isNuxt3(nuxt)) {
            logger.info(message);
          } else if (serverStarted) {
            nuxt.hook("build:done", () => {
              serverStarted = true;
              logger.info(message);
            });
          } else {
            nuxt.options.cli.badgeMessages.push(message);
          }
        });
      }
    }
  }
});

export { index as default };
