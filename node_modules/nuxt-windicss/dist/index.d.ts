import * as _nuxt_schema from '@nuxt/schema';
import { UserOptions, WindiPluginUtils, ResolvedOptions } from '@windicss/plugin-utils';
import { Config } from 'windicss/types/interfaces';
import { ListenOptions } from 'listhen';
import { AnalysisOptions } from 'windicss-analysis';

declare type AnalyzeOptions = true | false | {
    analysis?: AnalysisOptions;
    server?: Partial<ListenOptions>;
};
declare type NuxtWindiOptions = UserOptions & {
    /**
     * Pass a pre-instantiated WindiPluginUtils instance to avoid duplicate scans if you're using the engine elsewhere.
     *
     * @default undefined
     */
    utils?: WindiPluginUtils;
    /**
     * Launches Windi Analyze when in development mode.
     * @default false
     */
    analyze?: AnalyzeOptions;
    /**
     * Shows nuxt-windicss and windicss versions on build:before hook.
     * @default true
     */
    displayVersionInfo?: boolean;
};
declare type NuxtHookResult = Promise<void> | void;
declare module '@nuxt/types' {
    interface NuxtConfig {
        windicss?: NuxtWindiOptions;
    }
}
declare module '@nuxt/schema' {
    interface NuxtConfig {
        windicss?: NuxtWindiOptions;
    }
    interface NuxtOptions {
        windicss?: NuxtWindiOptions;
    }
    interface ConfigSchema {
        windicss?: NuxtWindiOptions;
    }
    interface NuxtHooks {
        'windicss:options': (options: ResolvedOptions) => NuxtHookResult;
        'windicss:config': (config: Config) => NuxtHookResult;
        'windicss:utils': (utils: WindiPluginUtils) => NuxtHookResult;
        'content:file:beforeParse': (md: {
            path: string;
            extension: string;
            data: any;
        }) => NuxtHookResult;
    }
}

declare const _default: _nuxt_schema.NuxtModule<NuxtWindiOptions>;

export { AnalyzeOptions, NuxtWindiOptions, _default as default };
